Class CUSTOM.RITE.OdsRefresh.Operation.NormalizationOdsRefresh Extends (Ens.BusinessOperation, Ens.Util.FunctionSet)
{

Parameter ADAPTER = "EnsLib.SQL.OutboundAdapter";

Parameter INVOCATION = "Queue";

Property BatchConfiguration As %String [ InitialExpression = "1000" ];

/// Additional Settings 
Parameter SETTINGS = "BatchConfiguration";

/// Query Analytics Hsaa tables
/// Method QueryAnalytics(pRequest As CUSTOM.RITE.OdsRefresh.Message.NormalizationOdsRefreshRequest, Output pResponse As EnsLib.SQL.Snapshot) As %Status
Method QueryAnalytics(pRequest As CUSTOM.RITE.OdsRefresh.Message.NormalizationOdsRefreshRequest, Output pResponse As CUSTOM.RITE.OdsRefresh.Message.NormalizationOdsRefreshResponse) As %Status
{
	$$$TRACE("Inside QueryAnalytics - SessionID = " _ ..%SessionId)
	
	; NormalizationEntityToHsaaTable lookup table identifies the Analytics HSAA table and field to query for each Entity
	s tTable = $PIECE(..Lookup("NormalizationEntityToHsaaTable", pRequest.Entity), "-", 1)
	s tField = $PIECE(..Lookup("NormalizationEntityToHsaaTable", pRequest.Entity), "-", 2)

	s tInCode = pRequest.InCode
		
	If pRequest.Entity '= "NslijRadResult" {
		s tInCodingSystem = pRequest.InCodingSystem
	}
	Else {
		s tInCodingSystem = $P(pRequest.InCodingSystem, "_", 2)
	}
			
	Set pResponse = ##class(CUSTOM.RITE.OdsRefresh.Message.NormalizationOdsRefreshResponse).%New()
	Set tStatus=$$$OK

	Try {  
		#Dim tRS As EnsLib.SQL.GatewayResultSet	
					
		If tTable = "HSAA.Patient" { 
			/*
    		tEntity pulls the left part of the HsaaField name, then _SDACodingStandard gets appended to
    		it so it can be used in the AND clause of the Select query to propertly identify the CodingSystem
    		that is associated with the updated code value
    		*/
    		$$$TRACE("True HSAA.Patient")
    		Set tEntity = $P(tField, "_", 1,*-1)
    		Set tQuery = "SELECT DISTINCT MPIID As Patients FROM HSAA.Patient WHERE " _ tField _ " = '" _ tInCode _ "' " _ "AND (CASE WHEN Extension_CustomPairSendingSystem is NULL THEN PatientNumbers ELSE $EXTRACT(Extension_CustomPairSendingSystem ,Length(Extension_CustomPairSendingSystem)-3,Length(Extension_CustomPairSendingSystem)) END) Like '%" _ tInCodingSystem _ "%'"
		}
		Else {
			; Select query for updated Entity codes in all other Analytics HSAA tables
			Set tQuery = "SELECT DISTINCT p.MPIID As Patients FROM HSAA.Patient p INNER JOIN " _ tTable _ " t " _ "ON p.ID = t.Patient " _ "WHERE t." _ tField _ " = '" _ tInCode _ "' " _ "AND t.TagFacility = '" _ tInCodingSystem _ "'"
			
		}
		
  		Set tHsaaQueryStartTime = $ZDT($H,3,1)
  		
  		Set MPIIDList = ""
  		Set MPIIDCount= 0
  		Set BatchCount = 0
  		 
		$$$TRACE("Analytics Query = " _ tQuery)
		
		Set tStatus = ..Adapter.ExecuteQuery(.tRS, tQuery)
	
		If $$$ISERR(tStatus) {
			$$$TRACE("tStatus Error is: " _ tStatus)
			return tStatus
		}
		Else {
			WHILE (tRS.%Next()) {
				Set MPIIDList = MPIIDList_","_tRS.Get("Patients")
				Set MPIIDCount= MPIIDCount+1
				Set BatchCount = BatchCount+1
				
				//Release Batch once BatchCount is same as Configured batch count
				If (BatchCount = ..BatchConfiguration ) {
					Set pBatchgRequest = ##class(CUSTOM.RITE.OdsRefresh.Message.OdsRefreshPatientListRequest).%New()
					Set pBatchgRequest.MPIID = $ZSTRIP(MPIIDList,"<",",")
					Set pBatchgRequest.MatchCount = BatchCount
					Do ..SendRequestSync("OdsRefreshPatientListOperation",pBatchgRequest,.tOdsRefreshPatientListResponse)
					$$$LOGINFO("List of MPIIDs in Batch: "_pBatchgRequest.MPIID)
					Set BatchCount = 0
					Set MPIIDList = ""					
				}
			}			
		}
		//Release Batch if BatchCount is less than Configured batch count
		If (BatchCount < ..BatchConfiguration) {
			Set pBatchgRequest = ##class(CUSTOM.RITE.OdsRefresh.Message.OdsRefreshPatientListRequest).%New()
			Set pBatchgRequest.MPIID = $ZSTRIP(MPIIDList,"<",",")
			Set pBatchgRequest.MatchCount = BatchCount
			Do ..SendRequestSync("OdsRefreshPatientListOperation",pBatchgRequest,.tOdsRefreshPatientListResponse)
			$$$LOGINFO("List of MPIIDs in Batch: "_pBatchgRequest.MPIID)				
		}
		
		Set pResponse.MatchCount = MPIIDCount
		
		s tHsaaQueryEndTime = $ZDT($H,3,1)
		
		s tStatus = ..CreateMetricsEntry(pRequest, tQuery, tHsaaQueryStartTime, tHsaaQueryEndTime, pResponse)
		
	}
	
	Catch (ex) {
		Set tStatus = ex.AsStatus()
		$$$LOGERROR($SYSTEM.Status.GetErrorText(tStatus))
	}

	Quit tStatus
}

Method CreateMetricsEntry(pRequest As CUSTOM.RITE.OdsRefresh.Message.NormalizationOdsRefreshRequest, tQuery As %String, tHsaaQueryStartTime As %String, tHsaaQueryEndTime As %String, pResponse As CUSTOM.RITE.OdsRefresh.Message.NormalizationOdsRefreshResponse) As %Status
{
	; Create OdsRefreshMetrics 
	s tOdsRefreshMetrics = ##class(CUSTOM.RITE.OdsRefresh.Metrics.OdsRefreshMetrics).%New()
	
	s tOdsRefreshMetrics.SessionID = ..%SessionId
	s tOdsRefreshMetrics.Entity = pRequest.Entity
	s tOdsRefreshMetrics.InCode = pRequest.InCode
	s tOdsRefreshMetrics.InCodingSystem = pRequest.InCodingSystem
	s tOdsRefreshMetrics.HsaaQuery = tQuery
	s tOdsRefreshMetrics.HsaaMatchCount = pResponse.MatchCount
	s tOdsRefreshMetrics.HsaaQueryStartTime = tHsaaQueryStartTime
	s tOdsRefreshMetrics.HsaaQueryEndTime = tHsaaQueryEndTime
	
	If tOdsRefreshMetrics.HsaaMatchCount = "0" {
		s tOdsRefreshMetrics.OdsMatchCount = "0"
		s tOdsRefreshMetrics.OdsQueryStartTime = "N/A"
		s tOdsRefreshMetrics.OdsQueryEndTime = "N/A"
	}
	
	s tStatus = tOdsRefreshMetrics.%Save()
	
	Quit tStatus
}

XData MessageMap
{
<MapItems>
	<MapItem MessageType="CUSTOM.RITE.OdsRefresh.Message.NormalizationOdsRefreshRequest"> 
		<Method>QueryAnalytics</Method>
	</MapItem>
</MapItems>
}

}
