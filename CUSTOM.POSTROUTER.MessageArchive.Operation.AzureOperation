Class CUSTOM.POSTROUTER.MessageArchive.Operation.AzureOperation Extends Ens.BusinessOperation
{

Parameter ADAPTER = "EnsLib.HTTP.OutboundAdapter";

Property Adapter As EnsLib.HTTP.OutboundAdapter;

Parameter INVOCATION = "Queue";

Property HL7Message As EnsLib.HL7.Message;

Property AzureSubscriptionKey As %String(MAXLEN = 999);

Property AzureNorthwellVersion As %String [ InitialExpression = "1.0" ];

Property BlobType As %String [ InitialExpression = "BlockBlob" ];

Property SecreteKey As %String(MAXLEN = 32);

Parameter SETTINGS = "SecreteKey:Additional,BlobType:Additional,AzureSubscriptionKey:Additional,AzureNorthwellVersion:Additional";

XData MessageMap
{
<MapItems>
  <MapItem MessageType="EnsLib.HL7.Message">
    <Method>ProcessRequest</Method>
  </MapItem>
</MapItems>
}

Method ProcessRequest(pRequest As Ens.Request, Output pResponse As CUSTOM.CORE.MessageArchive.Message.Response) As %Status
{
	Set status=$$$OK
	Try {
		Set ..HL7Message=pRequest
		//CosmosDb - Create Containers Header
		Set tFields=##class(CUSTOM.CORE.MessageArchive.Message.Container).%New()
		Set tFields.id=..GetCosmosRequestId()
		Set tFields.PartitionKey=..GetPartitionKey()
		Set tFields.HL7Header=..%RequestHeader
		Set tFields.RequestSource=pRequest.Source
		Set tFields.RequestDocType=pRequest.DocType
		Set tFields.RequestName=pRequest.Name
		Set tFields.RequestIdentifier= pRequest.Identifier
		Set tFields.DateTimeISO=$Replace(..%RequestHeader.TimeCreated," ","T")_"Z"
		#;
		Set tFields.MSH7=pRequest.GetValueAt("MSH:7")
		#;
		Set tNameObj=##class(CUSTOM.CORE.MessageArchive.Message.PatientName).%New()
		Set patientName=..GetName()
		Set tNameObj.FirstName=$Piece(patientName,..HL7Message.CS,2)
		Set tNameObj.MiddleName= $Piece(patientName,..HL7Message.CS,3)
		Set tNameObj.LastName=$Piece(patientName,..HL7Message.CS)
		Set tFields.PatientName=tNameObj
		#;
		Set tMRNObj=##class(CUSTOM.CORE.MessageArchive.Message.PatientIdentifier).%New()
		Set patientMrn=..GetMrn()
		Set tMRNObj.MRN=$Piece(patientMrn,":",1)
		Set tMRNObj.AssigningAuth=$Piece(patientMrn,":",2)
		Set tMRNObj.EPIID=..GetEPI()
		Set tMRNObj.HSPIID= ..GetMPIID()
		Do tFields.PatientIdentifier.Insert(tMRNObj)
		#;
		Set tFields.PatientAccNumber=..GetAccNumber()
		#;
		If (..HL7Message.GetValueAt("MSH:9.2")="A17"){
			Set tNameObji2=##class(CUSTOM.CORE.MessageArchive.Message.PatientName).%New()
			Set tNameObji2.FirstName=$Piece(..GetNamePIDi2(),..HL7Message.CS,2)
			Set tNameObji2.MiddleName= $Piece(..GetNamePIDi2(),..HL7Message.CS,3)
			Set tNameObji2.GivenName=$Piece(..GetNamePIDi2(),..HL7Message.CS)
			Set tFields.PatientNameI2= tNameObji2
			;
			Set tMRNObj2=##class(CUSTOM.CORE.MessageArchive.Message.PatientIdentifier).%New()
			Set tMRNObj2.MRN=$Piece(..GetMrnPIDi2(),":",1)
			Set tMRNObj2.AssigningAuth=$Piece(..GetMrnPIDi2(),":",2)
			Set tMRNObj2.EPIID=..GetEPIi2()
			Set tMRNObj2.HSPIID=..GetMPIIDi2()
			Do tFields.PatientIdentifierI2.Insert(tMRNObj2)
			;
			Set tFields.PatientAccNumberI2=..GetAccNumberPIDi2()
		}
		
		If ((..HL7Message.GetValueAt("MSH:9.1")="ORU")||(..HL7Message.GetValueAt("MSH:9.1")="ORM")){
			Set tFields.OBR4= ..GetOBR4()	
		}
		Set tFields.RAWContent=..HL7Message.RawContent
		
		//Coverting HL7 Object to Json Object
		Do ##class(%ZEN.Auxiliary.jsonProvider).%WriteJSONStreamFromObject(.tJsonObj,.tFields,,,,"iw")
		
		// Post Call to SaveHl7Message in APIM
		#Dim tRestApiImpObj As CUSTOM.CORE.MessageArchive.Util.RestApiImplementor
		
		Set tRestApiImpObj=##class(CUSTOM.CORE.MessageArchive.Util.RestApiImplementor).%New().SetContentType("application/json").SetHeader("x-northwell-blobType",..BlobType).SetHeader("x-northwell-partitionKey","["""_tFields.PartitionKey_"""]").SetHeader("Ocp-Apim-Subscription-Key",..AzureSubscriptionKey).SetHeader("x-northwell-version",..AzureNorthwellVersion).SetRequestBody(tJsonObj,..SecreteKey).SetSSLconfig(..Adapter.SSLConfig).EnableHttps(1).PostRequest(..Adapter.URL_tFields.id).GetHttpResponse()
		$$$LOGINFO("IV Value: " _tRestApiImpObj.HttpResponse.GetHeader("x-northwell-iv"))
		Set pResponse =##Class(CUSTOM.CORE.MessageArchive.Message.Response).%New()
		Set pResponse.Status=$Replace(tRestApiImpObj.HttpResponse.StatusLine,"HTTP/1.1 ","")
		Do pResponse.RawResponse.CopyFrom(tRestApiImpObj.HttpResponse.Data)
		Do tRestApiImpObj.HttpResponse.Data.Rewind()
		Set tRespStatusCode=+pResponse.Status
		If ((tRespStatusCode>299)||(tRespStatusCode=0)){
				$$$ThrowStatus($$$ERROR($$$GeneralError, "Failed:"_pResponse.Status_$Char(13,10)_"Response message:"_pResponse.RawResponse.Read()))	
		}Else{
			$$$LOGINFO("Successful:"_pResponse.Status_$Char(13,10)_"Response message:"_pResponse.RawResponse.Read())
		}  
	}
	Catch (ex) {
		Set status=ex.AsStatus()
		$$$LOGERROR("Could not request url with error message: " _$SYSTEM.Status.GetErrorText(ex.AsStatus()))
	}
	Quit status
}

Method GetCosmosRequestId() As %String
{
	Quit $ZUtil(5)_..%RequestHeader.%Id()
}

Method GetPartitionKey() As %String
{
	Quit ..%RequestHeader.SourceConfigName_"_"_$Translate($Piece(..%RequestHeader.TimeCreated," "),"-")
}

Method GetMrn() As %String
{
	Set tMRN=""
	Set NextIndex=""
	Set HasPIDGrp=0
	Set HasPIDRepGrp=0
	Set HasPIDGrpGrp=0
	Set MsgDocType=..HL7Message.DocType
	Set DocTypeCategory =$Piece(MsgDocType,":")
	Set DocTypeName =$Piece(MsgDocType,":",2)
	Set NextIndex= $Order(^EnsHL7.Schema(DocTypeCategory,"MS",DocTypeName,"map",NextIndex))
	While NextIndex'=""{
		If (NextIndex["PIDgrp"){
			Set HasPIDGrp= 1
		}
		If (NextIndex["PIDgrp()"){
			Set HasPIDRepGrp= 1
		}
		If (NextIndex["PIDgrpgrp()"){
			Set HasPIDGrpGrp= 1
		}
		Set NextIndex= $Order(^EnsHL7.Schema(DocTypeCategory,"MS",DocTypeName,"map",NextIndex))
	}                                 
	If (HasPIDGrp=1)&&(HasPIDRepGrp=0)&&(HasPIDGrpGrp=0){
		If ($Length(..HL7Message.GetValueAt("PIDgrp.PID:3"),"~")>1){
			For k=1:1:$Length(..HL7Message.GetValueAt("PIDgrp.PID:3"),"~"){
		    	If (..HL7Message.GetValueAt("PIDgrp.PID:3("_k_").5")="MR")||(..HL7Message.GetValueAt("PIDgrp.PID:3("_k_").5")="MRN"){
			    	Set tMRN=..HL7Message.GetValueAt("PIDgrp.PID:3("_k_").1")_":"_..HL7Message.GetValueAt("PIDgrp.PID:3("_k_").4")
			 	}
		  	}
		}Else{
			Set tMRN=..HL7Message.GetValueAt("PIDgrp.PID:3.1")_":"_..HL7Message.GetValueAt("PIDgrp.PID:3.4")
		}
		Quit tMRN
	}ElseIf (HasPIDRepGrp=1){
		If ($Length(..HL7Message.GetValueAt("PIDgrp(1).PID:3"),"~")>1){
			For k=1:1:$Length(..HL7Message.GetValueAt("PIDgrp(1).PID:3"),"~"){
		    	If (..HL7Message.GetValueAt("PIDgrp(1).PID:3("_k_").5")="MR")||(..HL7Message.GetValueAt("PIDgrp(1).PID:3("_k_").5")="MRN"){
			    	Set tMRN=..HL7Message.GetValueAt("PIDgrp(1).PID:3("_k_").1")_":"_..HL7Message.GetValueAt("PIDgrp(1).PID:3("_k_").4")
			 	}
		  	}
		 }Else{
			Set tMRN=..HL7Message.GetValueAt("PIDgrp(1).PID:3.1")_":"_..HL7Message.GetValueAt("PIDgrp(1).PID:3.4")
		}
		Quit tMRN
	}ElseIf (HasPIDGrpGrp=1){
		If ($Length(..HL7Message.GetValueAt("PIDgrpgrp(1).PIDgrp.PID:3"),"~")>1){
			For k=1:1:$Length(..HL7Message.GetValueAt("PIDgrpgrp(1).PIDgrp.PID:3"),"~"){
		    	If (..HL7Message.GetValueAt("PIDgrpgrp(1).PIDgrp.PID:3("_k_").5")="MR")||(..HL7Message.GetValueAt("PIDgrpgrp(1).PIDgrp.PID:3("_k_").5")="MRN"){
			    	Set tMRN=..HL7Message.GetValueAt("PIDgrpgrp(1).PIDgrp.PID:3("_k_").1")_":"_..HL7Message.GetValueAt("PIDgrpgrp(1).PIDgrp.PID:3("_k_").4")
			 	}
		  	}
		 }Else{
			Set tMRN=..HL7Message.GetValueAt("PIDgrpgrp(1).PIDgrp.PID:3.1")_":"_..HL7Message.GetValueAt("PIDgrpgrp(1).PIDgrp.PID:3.4")
		}
		Quit tMRN
	}Else{
		If ($Length(..HL7Message.GetValueAt("PID:3"),"~")>1){
		For k=1:1:$Length(..HL7Message.GetValueAt("PID:3"),"~"){
		     If (..HL7Message.GetValueAt("PID:3("_k_").5")="MR")||(..HL7Message.GetValueAt("PID:3("_k_").5")="MRN"){
			     Set tMRN=..HL7Message.GetValueAt("PID:3("_k_").1")_":"_..HL7Message.GetValueAt("PID:3("_k_").4")
			 }
		  }
		 }Else{
			Set tMRN=..HL7Message.GetValueAt("PID:3.1")_":"_..HL7Message.GetValueAt("PID:3.4")
		}
	Quit tMRN
	}
}

Method GetMrnPIDi2() As %String
{
	Set tMRNPIDi2=""
	If ($Length(..HL7Message.GetValueAt("PIDi2:3"),"~")>1){
		For k=1:1:$Length(..HL7Message.GetValueAt("PIDi2:3"),"~"){
			If (..HL7Message.GetValueAt("PIDi2:3("_k_").5")="MR")||(..HL7Message.GetValueAt("PIDi2:3("_k_").5")="MRN"){
				Set tMRNPIDi2=..HL7Message.GetValueAt("PIDi2:3("_k_").1")_":"_..HL7Message.GetValueAt("PIDi2:3("_k_").4")
			}
		 }
		 }Else{
			Set tMRNPIDi2=..HL7Message.GetValueAt("PIDi2:3.1")_":"_..HL7Message.GetValueAt("PIDi2:3.4")
		}
	Quit tMRNPIDi2
}

Method GetEPI() As %String
{
	Set tEPI=""
	Set NextIndex=""
	Set HasPIDGrp=0
	Set HasPIDRepGrp=0
	Set HasPIDGrpGrp=0
	Set MsgDocType=..HL7Message.DocType
	Set DocTypeCategory =$Piece(MsgDocType,":")
	Set DocTypeName =$Piece(MsgDocType,":",2)
	Set NextIndex= $Order(^EnsHL7.Schema(DocTypeCategory,"MS",DocTypeName,"map",NextIndex))
	While NextIndex'=""{
		If (NextIndex["PIDgrp"){
			Set HasPIDGrp= 1
		}
		If (NextIndex["PIDgrp()"){
			Set HasPIDRepGrp= 1
		}
		If (NextIndex["PIDgrpgrp()"){
			Set HasPIDGrpGrp= 1
		}
		Set NextIndex= $Order(^EnsHL7.Schema(DocTypeCategory,"MS",DocTypeName,"map",NextIndex))
	}
	If ((HasPIDGrp=1)&&('HasPIDRepGrp)&&('HasPIDGrpGrp)){
		Set tEPI=..HL7Message.GetValueAt("PIDgrp.PID:2")
		Quit tEPI
	}ElseIf (HasPIDRepGrp=1){
		Set tEPI=..HL7Message.GetValueAt("PIDgrp(1).PID:2")
		Quit tEPI
	}ElseIf (HasPIDGrpGrp=1){
		Set tEPI=..HL7Message.GetValueAt("PIDgrpgrp(1).PIDgrp.PID:2")
		Quit tEPI
	}Else{
		Set tEPI=..HL7Message.GetValueAt("PID:2")
		Quit tEPI
	}
}

Method GetEPIi2() As %String
{
	Quit ..HL7Message.GetValueAt("PIDi2:2")
}

Method GetMPIID() As %String
{
	Set tMPIID=""
	Set NextIndex=""
	Set HasPIDGrp=0
	Set HasPIDRepGrp=0
	Set HasPIDGrpGrp=0
	Set MsgDocType=..HL7Message.DocType
	Set DocTypeCategory =$Piece(MsgDocType,":")
	Set DocTypeName =$Piece(MsgDocType,":",2)
	Set NextIndex= $Order(^EnsHL7.Schema(DocTypeCategory,"MS",DocTypeName,"map",NextIndex))
	While NextIndex'=""{
		If (NextIndex["PIDgrp"){
			Set HasPIDGrp= 1
		}
		If (NextIndex["PIDgrp()"){
			Set HasPIDRepGrp= 1
		}
		If (NextIndex["PIDgrpgrp()"){
			Set HasPIDGrpGrp= 1
		}
		Set NextIndex= $Order(^EnsHL7.Schema(DocTypeCategory,"MS",DocTypeName,"map",NextIndex))
	}
	If ((HasPIDGrp=1)&&('HasPIDRepGrp)&&('HasPIDGrpGrp)){
		Set tMPIID=..HL7Message.GetValueAt("PIDgrp.PID:4")
		Quit tMPIID
	}ElseIf (HasPIDRepGrp=1){
		Set tMPIID=..HL7Message.GetValueAt("PIDgrp(1).PID:4")
		Quit tMPIID
	}ElseIf (HasPIDGrpGrp=1){
		Set tMPIID=..HL7Message.GetValueAt("PIDgrpgrp(1).PIDgrp.PID:4")
		Quit tMPIID
	}Else{
		Set tMPIID=..HL7Message.GetValueAt("PID:4")
		Quit tMPIID
	}
}

Method GetMPIIDi2() As %String
{
	Quit ..HL7Message.GetValueAt("PIDi2:4")
}

Method GetName() As %String
{
	Set NextIndex=""
	Set HasPIDGrp=0
	Set HasPIDRepGrp=0
	Set HasPIDGrpGrp=0
	Set MsgDocType=..HL7Message.DocType
	Set DocTypeCategory =$Piece(MsgDocType,":")
	Set DocTypeName =$Piece(MsgDocType,":",2)
	Set NextIndex= $Order(^EnsHL7.Schema(DocTypeCategory,"MS",DocTypeName,"map",NextIndex))
	While NextIndex'=""{
		If (NextIndex["PIDgrp"){
			Set HasPIDGrp= 1
		}
		If (NextIndex["PIDgrp()"){
			Set HasPIDRepGrp= 1
		}
		If (NextIndex["PIDgrpgrp()"){
			Set HasPIDGrpGrp= 1
		}
		Set NextIndex= $Order(^EnsHL7.Schema(DocTypeCategory,"MS",DocTypeName,"map",NextIndex))
	}
	If ((HasPIDGrp=1)&&('HasPIDRepGrp)&&('HasPIDGrpGrp)){
		Quit ..HL7Message.GetValueAt("PIDgrp.PID:5")
	}ElseIf (HasPIDRepGrp=1){
		Quit ..HL7Message.GetValueAt("PIDgrp(1).PID:5")
	}ElseIf (HasPIDGrpGrp=1){
		Quit ..HL7Message.GetValueAt("PIDgrpgrp(1).PIDgrp.PID:5")
	}Else{
		Quit ..HL7Message.GetValueAt("PID:5")
	}
}

Method GetNamePIDi2() As %String
{
	Quit ..HL7Message.GetValueAt("PIDi2:5")
}

Method GetAccNumber() As %String
{
	Set NextIndex=""
	Set HasPIDGrp=0
	Set HasPIDRepGrp=0
	Set HasPIDGrpGrp=0
	Set MsgDocType=..HL7Message.DocType
	Set DocTypeCategory =$Piece(MsgDocType,":")
	Set DocTypeName =$Piece(MsgDocType,":",2)
	Set NextIndex= $Order(^EnsHL7.Schema(DocTypeCategory,"MS",DocTypeName,"map",NextIndex))
	While NextIndex'=""{
		If (NextIndex["PIDgrp"){
			Set HasPIDGrp= 1
		}
		If (NextIndex["PIDgrp()"){
			Set HasPIDRepGrp= 1
		}
		If (NextIndex["PIDgrpgrp()"){
			Set HasPIDGrpGrp= 1
		}
		Set NextIndex= $Order(^EnsHL7.Schema(DocTypeCategory,"MS",DocTypeName,"map",NextIndex))
	}
	If ((HasPIDGrp=1)&&('HasPIDGrpGrp)&&('HasPIDGrpGrp)){
		Quit ..HL7Message.GetValueAt("PIDgrp.PID:18.1")
	}ElseIf (HasPIDRepGrp=1){
		Quit ..HL7Message.GetValueAt("PIDgrp(1).PID:18.1")
	}ElseIf (HasPIDGrpGrp=1){
		Quit ..HL7Message.GetValueAt("PIDgrpgrp(1).PIDgrp.PID:18.1")
	}Else{
		Quit ..HL7Message.GetValueAt("PID:18.1")
	}
}

Method GetAccNumberPIDi2() As %String
{
	Quit ..HL7Message.GetValueAt("PIDi2:18.1")
}

Method GetOBR4() As %String
{
	Set NextIndex=""
	Set HasPIDGrpGrp=0
	Set HasOBRGrp=0
	Set HasORCGrp=0
	Set MsgDocType=..HL7Message.DocType
	Set DocTypeCategory =$Piece(MsgDocType,":")
	Set DocTypeName =$Piece(MsgDocType,":",2)
	Set NextIndex= $Order(^EnsHL7.Schema(DocTypeCategory,"MS",DocTypeName,"map",NextIndex))
	While NextIndex'=""{
		If (NextIndex["PIDgrpgrp().ORCgrp()"){
			Set HasPIDGrpGrp= 1
		}
		If (NextIndex["ORCgrp()"){
			Set HasORCGrp= 1
		}
		If (NextIndex["OBRgrp()"){
			Set HasOBRGrp= 1
		}
		Set NextIndex= $Order(^EnsHL7.Schema(DocTypeCategory,"MS",DocTypeName,"map",NextIndex))
	}
	If (HasPIDGrpGrp=1){
		Quit ..HL7Message.GetValueAt("PIDgrpgrp(1).ORCgrp(1).OBR:4")
	}ElseIf ((HasORCGrp=1)&&(HasPIDGrpGrp=0)){
		Quit ..HL7Message.GetValueAt("ORCgrp(1).OBR:4")
	}ElseIf (HasOBRGrp=1){
		Quit ..HL7Message.GetValueAt("OBRgrp(1).OBR:4")
	}Else{
		Quit ..HL7Message.GetValueAt("OBR:4")
	}
}

/*
Method GetDateTimeFormat() As %String
{
	Set DTStamp=..HL7Message.GetValueAt("MSH:7")
	Set DTStamp= $ZSTRIP(($E(DTStamp,1,4)_"-"_$E(DTStamp,5,6)_"-"_$E(DTStamp,7,8)_" "_$E(DTStamp,9,10)_":"_$E(DTStamp,11,12)_":"_$E(DTStamp,13,*)),">P")
	Q DTStamp
}*/
}

************************************

Class CUSTOM.CORE.MessageArchive.Message.Container Extends %RegisteredObject
{

Property id As %String;

Property PartitionKey As %String;

Property HL7Header As %Persistent;

Property RequestSource As %String(MAXLEN = 99999);

Property RequestDocType As %String;

/// HL7 Event Type
Property RequestName As %String;

Property RequestIdentifier As %String;

Property DateTimeISO As %String;

Property MSH7 As %String;

Property PatientName As CUSTOM.CORE.MessageArchive.Message.PatientName;

Property PatientIdentifier As list Of CUSTOM.CORE.MessageArchive.Message.PatientIdentifier;

Property PatientAccNumber As %String;

Property PatientNameI2 As CUSTOM.CORE.MessageArchive.Message.PatientName;

Property PatientIdentifierI2 As list Of CUSTOM.CORE.MessageArchive.Message.PatientIdentifier;

Property PatientAccNumberI2 As %String;

Property OBR4 As %String;

Property RAWContent As %String(MAXLEN = "");

}

*******************************

/// To Create Patient Indentifier to differentiate MRN and assigning Authority
Class CUSTOM.CORE.MessageArchive.Message.PatientIdentifier Extends %RegisteredObject
{

Property MRN As %String;

Property AssigningAuth As %String;

Property EPIID As %String;

Property HSPIID As %String;

}


*******************************

Class CUSTOM.CORE.MessageArchive.Message.PatientName Extends %RegisteredObject
{

Property FirstName As %String;

Property MiddleName As %String;

Property LastName As %String;

Property GivenName As %String;

}
******************************************************************

/// For the record: raw HTTP response body resulting from request URL
Class CUSTOM.CORE.MessageArchive.Message.Response Extends Ens.Response
{

Property Status As %String(MAXLEN = 9999);

Property RawResponse As %Stream.GlobalCharacter;

Storage Default
{
<Data name="ResponseDefaultData">
<Subscript>"Response"</Subscript>
<Value name="1">
<Value>Status</Value>
</Value>
<Value name="2">
<Value>RawResponse</Value>
</Value>
</Data>
<DefaultData>ResponseDefaultData</DefaultData>
<Type>%Library.CacheStorage</Type>
}

}

************************************************************




